// #define ZMK_POINTING_DEFAULT_MOVE_VAL 800 
// #define ZMK_POINTING_DEFAULT_SCRL_VAL 120

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// #include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
            layers = <0>;
        };

        shift_tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
            require-prior-idle-ms = <0>;
            layers = <0>;
        };

        double_quotation {
            bindings = <&kp CAPS>;
            key-positions = <20 21>;
            layers = <0>;
        };

        eq {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <8 9>;
            layers = <2>;
        };

        BS {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 9>;
            layers = <0>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q                &kp W             &kp E     &kp R        &kp T     &kp Y        &kp U          &kp I           &kp O            &kp P
&kp A                &kp S             &kp D     &kp F        &kp G     &kp H        &kp J          &kp K           &kp L            &kp LEFT_BRACKET
&kp Z                &kp X             &kp C     &kp V        &kp B     &kp N        &kp M          &kp COMMA       &kp PERIOD       &kp UP_ARROW
&mt LEFT_SHIFT CLCK  &mt LEFT_GUI TAB  &mkp MB2  &lt 1 SPACE  &mkp MB1  &lt 2 ENTER  &kp BACKSPACE  &kp LEFT_ARROW  &kp RIGHT_ARROW  &lt 4 DOWN_ARROW
            >;
        };

        FUNCTION {
            bindings = <
&kp N1           &kp N2       &kp N3            &kp N4        &kp N5       &kp N6     &kp N7        &kp N8             &kp N9             &kp N0
&kp EXCLAMATION  &kp AT_SIGN  &kp HASH          &kp DOLLAR    &kp PERCENT  &kp HOME   &kp SQT       &kp MINUS          &kp TILDE          &kp QMARK
&kp PLUS         &kp MINUS    &kp ASTERISK      &kp SLASH     &kp EQUAL    &kp END    &kp QUESTION  &kp LEFT_BRACKET   &kp RIGHT_BRACKET  &kp SLASH
&kp N1           &kp N2       &kp LEFT_CONTROL  &kp LEFT_GUI  &none        &kp MINUS  &kp LEFT_ALT  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP    &kp N4
            >;
        };

        NUM {
            bindings = <
&kp LS(NUMBER_1)  &kp LS(F2)  &kp LS(F3)         &kp LS(NUMBER_4)  &kp LS(F5)      &kp RS(NUMBER_6)  &kp RS(F7)      &kp RS(N8)        &kp RS(N9)         &kp RS(N0)
&kp AT_SIGN       &kp SQT     &kp DOUBLE_QUOTES  &kp SEMICOLON     &kp COLON       &kp LEFT          &kp DOWN_ARROW  &kp UP_ARROW      &kp RIGHT          &kp ENTER
&kp Z             &kp X       &kp C              &kp V             &kp B           &kp LC(SPACE)     &kp RG(SPACE)   &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp SLASH
&kp N1            &kp N2      &kp LEFT_CONTROL   &kp LEFT_GUI      &kp UNDERSCORE  &none             &kp LEFT_ALT    &kp BACKSPACE     &kp N3             &mo 4
            >;
        };

        ARROW {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2      &kp R         &kp T            &kp Y     &kp U         &kp I      &kp O       &kp P
&kp A         &mmv MOVE_LEFT  &mmv MOVE_DOWN    &mmv MOVE_UP  &mmv MOVE_RIGHT  &kp H     &kp J         &kp K      &kp L       &kp ENTER
&kp Z         &kp X           &kp C             &kp V         &kp B            &kp N     &kp M         &kp COMMA  &kp PERIOD  &kp LEFT_SHIFT
&kp N1        &kp N2          &kp LEFT_CONTROL  &kp LEFT_GUI  &mkp MB1         &mkp MB2  &kp LEFT_ALT  &to 0      &kp N3      &kp N4
            >;
        };

        MOUSE {
            bindings = <
&kp Q   &kp W   &kp E             &kp R         &kp T     &kp Y     &kp U         &kp I          &kp O       &kp P
&kp A   &kp S   &kp D             &kp F         &kp G     &kp H     &kp J         &kp K          &kp L       &kp ENTER
&kp Z   &kp X   &kp C             &kp V         &kp B     &kp N     &kp M         &kp COMMA      &kp PERIOD  &kp LEFT_SHIFT
&kp N1  &kp N2  &kp LEFT_CONTROL  &kp LEFT_GUI  &mkp MB1  &mkp MB2  &kp LEFT_ALT  &kp BACKSPACE  &kp N3      &mo 0
            >;
        };

        SCROLL {
            bindings = <
&kp Q   &kp W   &kp E             &kp R         &kp T        &kp Y        &kp U         &kp I          &kp O       &kp P
&kp A   &kp S   &kp D             &kp F         &kp G        &kp H        &kp J         &kp K          &kp L       &kp ENTER
&kp Z   &kp X   &kp C             &kp V         &kp B        &kp N        &kp M         &kp COMMA      &kp PERIOD  &kp LEFT_SHIFT
&kp N1  &kp N2  &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE  &lt 2 SPACE  &kp LEFT_ALT  &kp BACKSPACE  &kp N3      &kp N4
            >;
        };

        layer_6 {
            bindings = <
&kp Q   &kp W   &kp E             &kp R         &kp T        &kp Y        &kp U         &kp I          &kp O       &kp P
&kp A   &kp S   &kp D             &kp F         &kp G        &kp H        &kp J         &kp K          &kp L       &kp ENTER
&kp Z   &kp X   &kp C             &kp V         &kp B        &kp N        &kp M         &kp COMMA      &kp PERIOD  &kp LEFT_SHIFT
&kp N1  &kp N2  &kp LEFT_CONTROL  &kp LEFT_GUI  &lt 1 SPACE  &lt 2 SPACE  &kp LEFT_ALT  &kp BACKSPACE  &kp N3      &kp N4
            >;
        };
    };
};
